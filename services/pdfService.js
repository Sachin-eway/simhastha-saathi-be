const PDFDocument = require('pdfkit');
const QRCode = require('qrcode');

class PDFService {
  // Generate PDF with QR codes (6 per A4 page)
  static async generateQRPDF(qrData, res) {
    try {
      // Create PDF document
      const doc = new PDFDocument({
        size: 'A4',
        margin: 50
      });

      // Set response headers for PDF download
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename="qr-codes.pdf"');

      // Pipe PDF to response
      doc.pipe(res);

      // A4 dimensions in points (1 inch = 72 points)
      const pageWidth = 595.28; // A4 width
      const pageHeight = 841.89; // A4 height
      const margin = 50;
      const usableWidth = pageWidth - (2 * margin);
      const usableHeight = pageHeight - (2 * margin);

      // QR code dimensions (2x3 grid = 6 QR codes per page)
      const qrSize = Math.min(usableWidth / 3, usableHeight / 2) - 20; // 20 points padding
      const qrSpacingX = usableWidth / 3;
      const qrSpacingY = usableHeight / 2;

      let currentPage = 0;
      let qrIndex = 0;

      // Process QR codes in batches of 6
      while (qrIndex < qrData.length) {
        // Add new page if not first page
        if (currentPage > 0) {
          doc.addPage();
        }

        // Add page title
        doc.fontSize(16)
           .font('Helvetica-Bold')
           .text('QR Codes - Simhastha Saathi', margin, margin, {
             align: 'center',
             width: usableWidth
           });

        // Add generation date
        doc.fontSize(10)
           .font('Helvetica')
           .text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, margin, margin + 25, {
             align: 'center',
             width: usableWidth
           });

        // Generate QR codes for current page (max 6)
        const qrsForThisPage = qrData.slice(qrIndex, qrIndex + 6);
        
        for (let i = 0; i < qrsForThisPage.length; i++) {
          const qr = qrsForThisPage[i];
          const row = Math.floor(i / 3);
          const col = i % 3;
          
          const x = margin + (col * qrSpacingX) + (qrSpacingX - qrSize) / 2;
          const y = margin + 60 + (row * qrSpacingY) + (qrSpacingY - qrSize) / 2;

          try {
            // Generate QR code as data URL
            const qrDataURL = await QRCode.toDataURL(qr.id.toString(), {
              width: qrSize,
              margin: 1,
              color: {
                dark: '#000000',
                light: '#FFFFFF'
              }
            });

            // Add QR code image to PDF
            doc.image(qrDataURL, x, y, { width: qrSize, height: qrSize });

            // Add QR ID below the QR code
            doc.fontSize(8)
               .font('Helvetica')
               .text(`ID: ${qr.id}`, x, y + qrSize + 5, {
                 align: 'center',
                 width: qrSize
               });

            // Add creation date
            doc.fontSize(6)
               .font('Helvetica')
               .text(`Created: ${new Date(qr.created_at).toLocaleDateString('en-IN')}`, x, y + qrSize + 15, {
                 align: 'center',
                 width: qrSize
               });

          } catch (qrError) {
            console.error(`Error generating QR for ID ${qr.id}:`, qrError);
            
            // Add placeholder rectangle if QR generation fails
            doc.rect(x, y, qrSize, qrSize)
               .stroke();
            
            doc.fontSize(8)
               .font('Helvetica')
               .text(`Error: ${qr.id}`, x, y + qrSize/2, {
                 align: 'center',
                 width: qrSize
               });
          }
        }

        qrIndex += 6;
        currentPage++;
      }

      // Add footer
      doc.fontSize(8)
         .font('Helvetica')
         .text(`Total QR Codes: ${qrData.length} | Generated by Simhastha Saathi`, 
               margin, pageHeight - 30, {
                 align: 'center',
                 width: usableWidth
               });

      // Finalize PDF
      doc.end();

    } catch (error) {
      console.error('PDF generation error:', error);
      throw new Error(`Failed to generate PDF: ${error.message}`);
    }
  }

  // Generate QR code as data URL for individual use
  static async generateQRDataURL(qrId, options = {}) {
    try {
      const defaultOptions = {
        width: 200,
        margin: 1,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      };

      const qrOptions = { ...defaultOptions, ...options };
      return await QRCode.toDataURL(qrId.toString(), qrOptions);
    } catch (error) {
      throw new Error(`Failed to generate QR data URL: ${error.message}`);
    }
  }
}

module.exports = PDFService;
